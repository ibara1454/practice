package com.example.demo.service;

import com.example.demo.entity.Item;
import com.example.demo.entity.Item_;
import com.example.demo.repository.ItemRepository;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

/**
 * Using JPA Specifications
 * see
 * https://qiita.com/tag1216/items/3a408d2751a6310e2948
 * https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/
 */
@Service
public class ItemService {
  @Autowired
  private ItemRepository itemRepository;

  /**
   * Find all items satisfy the searching query.
   * The query is a string which is built from several keywords or
   * without any keywords.
   * The keywords are the words that the `name` field of each item
   * in search result should contains.
   *
   * <p>To get the right way writting a query string, you should
   * concatenate keywords with spaces or em spaces. For example,
   * "  word1  word2 word3  " is a valid query.
   * The keywords are splited by spaces (or em spaces). And the
   * begin of query and the end of query may be spaces. Even
   * the delimiter (spaces) is with length longer than 1, it could
   * be recognized correctly.
   * @param nameQuery the search query with keywords
   * @param pageable pageable object defined the page size and page number, etc.
   * @return all items satisfy the searching query
   */
  public Page<Item> findAll(String nameQuery, Pageable pageable) {
    // Split query into a list of keyword
    final List<String> keywords = splitQuery(nameQuery);
    // Itentity specification.
    // `Specification#where` do nothing while null specification is passed,
    // which makes `zero` to be an initialize value of `Specification`s.
    final Specification<Item> zero = Specification.where((Specification<Item>)null);
    final Specification<Item> spec = keywords
        .stream()
        .map(this::nameContains)
        .reduce(zero, Specification<Item>::and);

    return itemRepository.findAll(spec, pageable);
  }

  /**
   * Find one item with the specified id.
   * @param id the id of item (also the primary key of item)
   * @return such item
   */
  public Optional<Item> findOne(Integer id) {
    return itemRepository.findById(id);
  }

  /**
   * Split the query string into words.
   * The delimiter could be spaces or em spaces, or both of them.
   * @param query the string with several words are splited by spaces
   * @return list of words
   */
  private List<String> splitQuery(String query) {
    final String space = " ";
    // Replaces all multiple spaces and em spaces with single space.
    final String spacesPattern = "[\\sã€€]+";
    final String monoSpaceQuery = query.replaceAll(spacesPattern, space);
    // Trims spaces in the end and begin of query, such that no empty element
    // will generated by String.split("\\s").
    final String trimmedMonoSpaceQuery = monoSpaceQuery.trim();

    return Arrays.asList(trimmedMonoSpaceQuery.split("\\s"));
  }

  /**
   * Builds JPA specification of SQL query `WHERE item.name LIKE '%name%'`.
   *
   * <p>About JPA specifications, see
   * https://qiita.com/tag1216/items/3a408d2751a6310e2948
   * https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/
   * @param name the words used in the SQL searching query
   * @return JPA specification applies the query `WHERE item.name LIKE '%name%'`
   */
  private Specification<Item> nameContains(String name) {
    return new Specification<Item>() {
      @Override
      public Predicate toPredicate(Root<Item> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
        return cb.like(root.get(Item_.name), "%" + name + "%");
      }
    };
  }
}
